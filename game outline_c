//global variables
var playerTurn = 0; //0 = Player 1, 1 = Player 2
var player1score = 0; 
var player2score = 0;
//var lastBox = 0; 

var lastDirection = 0; //0 = vertical, 1 = horizontal

var Tile = function (x, y, number) { // creates tiles (constructor function)
    this.x = x;
    this.y = y;
    this.size = 56; //tile size
    this.color = color(212, 172, 27); // neutral color
    this.number = number; //asigns a number value to the tiles
};

var tiles = []; // empty array for tiles

//is under mouse function = gives paramaters to the tiles so you can click them
Tile.prototype.isUnderMouse = function(x, y) {
    return x >= this.x && x <= this.x + this.size  && y >= this.y && y <= this.y + this.size;
}; // geometry test to see if its under the mouse 

// global variable 
var NUM_ROWS = 5; // number of rows (also used for colums)

for (var i = 0; i < NUM_ROWS*NUM_ROWS; i++) {
        //tile positioning 
        var tileY = i % NUM_ROWS * 68 + 64;
        var tileX = floor(i / NUM_ROWS) * 76 + 19;
        
        textSize(10);
        //the x and y value assigned to the tile
        text(i + " x:" + i % NUM_ROWS + " y:" + floor(i / NUM_ROWS), tileX, tileY);
        
        // Keep picking random numbers until we get a non-zero number 
        //pushes numbers -4 -> 4 (excluidng zero) into the arrays 
        var value = 0;
        while (value === 0) {
            value = round(random(-4, 4));   
        }
        
        tiles.push(new Tile (tileX, tileY, value));//pushes each tile
}

// Force middle to be blank (starting point)
tiles[12].number = " ";
tiles[12].color = color(74, 163, 15);

//global variable that keeps track of last move
var lastMove = tiles[12];
var x = tileX;
var y = tileY;
 
//draw function that draws tiles
Tile.prototype.draw = function() { //tile + number text description
    fill(this.color);
    //strokeWeight(2); //outline of the card
    rect(this.x, this.y, this.size, this.size, 10); //size of card
    fill(3, 0, 0);
    textSize(24);
    text(this.number, this.x+15, this.y+12, this.size, this.size);//number on the card (-4 - 4)(positioning of the numbers)
};

//allows for tiles to be clicked, 1st click will be player 1 (red), 2nd is player 2 (blue)
mouseClicked = function(){
    for (var i in tiles) {
        if (lastDirection === 0) {
            lastDirection = 1;
            
        }
        if (tiles[i].isUnderMouse(mouseX, mouseY)) {
            //Depending on player, add score and change color 
            if (tiles[i].color === color(212, 172, 27)) {
                //lastMove = (lastMove+1)%2;
                //lastBox = i;
                
                if (playerTurn === 0) {
                    tiles[i].color = color(245, 8, 59); //red (player1)
                    player1score+= tiles[i].number; //increases/decreases score by tile #
                    lastMove = tiles[i];
                    lastDirection = tiles[i].x;
                    playerTurn = 1; //ends turn for player 1
                } 
                
                else if (playerTurn === 1){
                    tiles[i].color = color(45, 10, 245); //blue (player 2)
                    player2score+= tiles[i].number; //increases/decreases score by tile #
                    lastMove = tiles[i];
                    lastDirection = tiles[i].y;
                    playerTurn = 0; //ends turn for player 2
                }
            }
        }
    }
};

var constraint = function() {
    var newX;
    
    if (lastDirection === 1 && lastMove === tiles[11]) {
        x = 1;
        
    } else {
        //move on vertical axis
        //lastDirection = 0 (vertical)
    }
    
    /*
    if player 1...
    If player turn = 0 and last move = 0 First click is in y2 column 

    if player 2...
    //player 1 moves up
    If player turn = 1 and last move = 11 click must be in row x1
    //player 1 moves down
	If player turn = 1 and last move = 13 click must be in row x3
    */
};

var checkWin = function() {
    //for (var i = 0; i < tiles.length; ++i) {
        //if (tiles.color !== color(212, 172, 27)) {
            //background(168, 47, 47);
        //}
    //}
    if (tiles[12].color === color (74, 163, 15) && tiles[0].color !== color(212, 172, 27) && tiles[0].color !== color(212, 172, 27) && tiles[1].color !== color(212, 172, 27) && tiles[2].color !== color(212, 172, 27) && tiles[3].color !== color(212, 172, 27) && tiles[4].color !== color(212, 172, 27) && tiles[5].color !== color(212, 172, 27) && tiles[6].color !== color(212, 172, 27) && tiles[7].color !== color(212, 172, 27) && tiles[8].color !== color(212, 172, 27) && tiles[9].color !== color(212, 172, 27) && tiles[10].color !== color(212, 172, 27) && tiles[11].color !== color(212, 172, 27) && tiles[13].color !== color(212, 172, 27) && tiles[14].color !== color(212, 172, 27) && tiles[15].color !== color(212, 172, 27) && tiles[16].color !== color(212, 172, 27) && tiles[17].color !== color(212, 172, 27) && tiles[18].color !== color(212, 172, 27) && tiles[19].color !== color(212, 172, 27) && tiles[20].color !== color(212, 172, 27) && tiles[21].color !== color(212, 172, 27) && tiles[22].color !== color(212, 172, 27) && tiles[23].color !== color(212, 172, 27) && tiles[24].color !== color(212, 172, 27)) {
        //currentScene = 3;
    }
};

//draw function that adds player score and calls the tilesdraw function
draw = function() {
    noStroke();
    //rect to blank out previous score
    fill(255, 255, 255);
    rect(8, 13, 776, 37);
    
    //text for Player Scores
    textSize(20);
    fill(245, 8, 59);
    text("Player 1 Score: " + player1score, 20, 42);
    fill(45, 10, 245);
    text("Player 2 Score: " + player2score, 225, 42);
    
    //to call draw tiles
   for (var i = 0; i < tiles.length; i++)
    {
        tiles[i].draw();
    }
    if (checkWin()) {
        background(94, 19, 19);
    }
};
